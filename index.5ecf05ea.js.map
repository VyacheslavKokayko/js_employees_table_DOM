{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,IAAM,EAAO,SAAS,aAAa,CAAC,QAC9B,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAY,EAAM,aAAa,CAAC,SAChC,EAAY,EAAM,aAAa,CAAC,SAChC,EAAO,MAAM,IAAI,CAAC,EAAU,gBAAgB,CAAC,OAE/C,EAAe,KACf,EAAY,MAmBhB,EAAK,OAAO,CAAC,SAAC,CAAd,EACE,EAAI,gBAAgB,CAAC,QAAS,WAR9B,EAAK,OAAO,CAAC,SAAC,CAAd,EACE,EAAK,SAAS,CAAC,MAAM,CAAC,SACxB,GAEA,AAKY,EALR,SAAS,CAAC,GAAG,CAAC,SAMlB,EACF,GAEA,EAAU,gBAAgB,CAAC,QAAS,SAAC,CAArC,EACE,IAAM,EAAQ,EAAE,MAAM,CAAC,SAAS,CAC1B,EAAY,MAAM,IAAI,CAAC,EAAU,gBAAgB,CAAC,MAEpD,CAAA,IAAU,EACZ,EAAY,AAAc,QAAd,EAAsB,OAAS,OAE3C,EAAe,EACf,EAAY,OAGd,IAAM,EAAa,EAAU,IAAI,CAAC,SAAC,CAAA,CAAM,CAAzC,EACE,OAAQ,GACN,KAAK,EACL,KAAK,EACL,KAAK,EACH,OAAO,EAAK,KAAK,CAAC,EAAM,CAAC,SAAS,CAAC,aAAa,CAC9C,EAAK,KAAK,CAAC,EAAM,CAAC,SAAS,CAG/B,MAAK,EACH,MAAO,CAAC,EAAK,KAAK,CAAC,EAAM,CAAC,SAAS,CAAG,CAAC,EAAK,KAAK,CAAC,EAAM,CAAC,SAAS,AAEpE,MAAK,EACH,OACE,WAAW,EAAK,KAAK,CAAC,EAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAC7C,WAAW,EAAK,KAAK,CAAC,EAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAGjD,SACE,OAAO,CACX,CACF,EAEkB,CAAA,SAAd,GACF,EAAW,OAAO,GAGpB,AAAA,EAAU,MAAM,CAAhB,KAAA,CAAA,E,A,S,C,E,G,M,O,C,G,O,E,E,EAAoB,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,EAAA,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,EAAA,I,A,W,M,A,U,wI,IACtB,GAEA,EAAK,SAAS,CAAC,GAAG,CAAC,qBACnB,SAAS,IAAI,CAAC,MAAM,CAAC,GAMrB,IAAM,EAAc,wEAGwE,MAAA,CAAtF,AA1EY,CAChB,QACA,YACA,SACA,WACA,YACA,gBACD,CAmEe,GAAG,CAAC,SAAC,CAHrB,EAGiC,MAAC,kBAA6B,MAAA,CAAZ,EAAQ,MAAY,MAAA,CAAR,EAAQ,YAAY,GAAA,IAAI,CAAC,IAAI,6BAmB5F,SAAS,EAAc,CAAI,CAAE,CAAS,EACpC,IAAM,EAAiB,SAAS,aAAa,CAAC,OAM9C,OAJA,EAAe,YAAY,CAAC,UAAW,gBACvC,EAAe,SAAS,CAAC,GAAG,CAAC,eAAgB,GAC7C,EAAe,SAAS,CAAG,EAEpB,CACT,CAfA,EAAK,kBAAkB,CAAC,aAFR,kCAGhB,EAAK,kBAAkB,CAAC,aAPJ,2FAQpB,EAAK,kBAAkB,CAAC,aAXP,+EAYjB,EAAK,kBAAkB,CAAC,aAAc,GACtC,EAAK,kBAAkB,CAAC,aArBF,wFAsBtB,EAAK,kBAAkB,CAAC,aAvBtB,uEAmCF,EAAK,gBAAgB,CAAC,SAAU,SAAC,CAAjC,EACE,EAAE,cAAc,GAEhB,IAAM,EAAO,IAAI,SAAS,GACpB,EAAa,EAAK,GAAG,CAAC,QACtB,EAAM,EAAK,GAAG,CAAC,OACf,EAAW,EAAK,GAAG,CAAC,YACpB,EAAS,EAAK,GAAG,CAAC,UAExB,GAAI,EAAW,IAAI,GAAG,MAAM,CAAG,EAC7B,SAAS,IAAI,CAAC,MAAM,CAClB,EAAc,qCAAsC,eAEjD,GAAI,AAA2B,IAA3B,EAAS,IAAI,GAAG,MAAM,CAC/B,SAAS,IAAI,CAAC,MAAM,CAClB,EAAc,iCAAkC,eAE7C,GAAI,AAAO,GAAP,CAAC,GAAY,CAAC,GAAO,IAAM,MAAM,GAC1C,SAAS,IAAI,CAAC,MAAM,CAClB,EAAc,4CAA6C,eAExD,GAAI,AAAW,GAAX,CAAC,EACV,SAAS,IAAI,CAAC,MAAM,CAAC,EAAc,aAAc,cAC5C,CACL,SAAS,IAAI,CAAC,MAAM,CAClB,EAAc,8BAA+B,YAG/C,IAAM,EAAY,CAChB,EACA,EACA,EAAK,GAAG,CAAC,UACT,EACC,IAAmD,MAAA,CAAhD,AAAC,CAAA,CAAE,CAAA,EAAS,GAAA,CAAG,EAAI,OAAO,CAAC,GAAG,OAAO,CAAC,IAAK,MAChD,CAEK,EAAS,EAAU,SAAS,CAAC,IAEnC,EAAU,OAAO,CAAC,SAAC,CAAA,CAAM,CAAzB,EAGE,AAFa,EAAO,UAAU,CAAC,GAE1B,SAAS,CAAG,CACnB,GAEA,EAAK,KAAK,EACZ,CAEA,WAAW,WAGT,AAFsB,SAAS,gBAAgB,CAAC,iBAElC,OAAO,CAAC,SAAC,CAAvB,EACE,EAAa,UAAU,CAAC,WAAW,CAAC,EACtC,EACF,EAAG,IACL,GAEA,IAAI,EAAa,KAEjB,EAAM,gBAAgB,CAAC,WAAY,SAAC,CAApC,EACE,EAAa,EAAE,MAAM,CAAC,WAAW,CAEjC,EAAE,MAAM,CAAC,SAAS,CAAG,oCAA+C,MAAA,CAAX,EAAW,MACpE,EAAE,MAAM,CAAC,aAAa,CAAC,eAAe,KAAK,EAC7C,GAEA,EAAM,gBAAgB,CAAC,OAAQ,SAAC,CAAhC,EACE,IAAM,EAAQ,EAAE,MAAM,CAEtB,GAAI,EAAM,SAAS,CAAC,QAAQ,CAAC,cAAe,CAC1C,IAAM,EAAU,EAAM,KAAK,CAAC,IAAI,IAAM,CAGtC,CAFa,EAAM,OAAO,CAAC,MAEtB,SAAS,CAAG,EACjB,EAAa,IACf,CACF,GAEA,EAAM,gBAAgB,CAAC,WAAY,SAAC,CAApC,EACE,IAAM,EAAQ,EAAE,MAAM,CAEtB,GAAI,AAAU,UAAV,EAAE,GAAG,EAAgB,EAAM,SAAS,CAAC,QAAQ,CAAC,cAAe,CAC/D,IAAM,EAAU,EAAM,KAAK,CAAC,IAAI,IAAM,CAGtC,CAFa,EAAM,OAAO,CAAC,MAEtB,SAAS,CAAG,EACjB,EAAa,IACf,CACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar form = document.createElement(\"form\");\nvar table = document.querySelector(\"table\");\nvar tableHead = table.querySelector(\"thead\");\nvar tableBody = table.querySelector(\"tbody\");\nvar rows = Array.from(tableBody.querySelectorAll(\"tr\"));\nvar sortedColumn = null;\nvar sortOrder = \"asc\";\nvar countries = [\n    \"Tokyo\",\n    \"Singapore\",\n    \"London\",\n    \"New York\",\n    \"Edinburgh\",\n    \"San Francisco\"\n];\nfunction selectRow(row) {\n    rows.forEach(function(item) {\n        item.classList.remove(\"active\");\n    });\n    row.classList.add(\"active\");\n}\nrows.forEach(function(row) {\n    row.addEventListener(\"click\", function() {\n        selectRow(row);\n    });\n});\ntableHead.addEventListener(\"click\", function(e) {\n    var _tableBody;\n    var index = e.target.cellIndex;\n    var rowsTable = Array.from(tableBody.querySelectorAll(\"tr\"));\n    if (index === sortedColumn) sortOrder = sortOrder === \"asc\" ? \"desc\" : \"asc\";\n    else {\n        sortedColumn = index;\n        sortOrder = \"asc\";\n    }\n    var sortedRows = rowsTable.sort(function(rowA, rowB) {\n        switch(index){\n            case 0:\n            case 1:\n            case 2:\n                return rowA.cells[index].innerText.localeCompare(rowB.cells[index].innerText);\n            case 3:\n                return +rowA.cells[index].innerText - +rowB.cells[index].innerText;\n            case 4:\n                return parseFloat(rowA.cells[index].innerText.slice(1)) - parseFloat(rowB.cells[index].innerText.slice(1));\n            default:\n                return 0;\n        }\n    });\n    if (sortOrder === \"desc\") sortedRows.reverse();\n    (_tableBody = tableBody).append.apply(_tableBody, _to_consumable_array(sortedRows));\n});\nform.classList.add(\"new-employee-form\");\ndocument.body.append(form);\nvar formName = '<label>Name: <input name=\"name\" data-qa=\"name\" type=\"text\"></label>';\nvar formPosition = '<label>Position:\\n    <input name=\"position\" data-qa=\"position\" type=\"text\"></label>';\nvar formCountry = '\\n  <label> Country:\\n  <select name=\"office\" data-qa=\"office\">\\n    '.concat(countries.map(function(country) {\n    return '<option value=\"'.concat(country, '\">').concat(country, \"</option>\");\n}).join(\"\"), \"\\n  </select>\\n  </label>\");\nvar formAge = '<label>Age:\\n    <input name=\"age\" data-qa=\"age\" type=\"number\">\\n  </label>';\nvar formSalary = '<label>Salary: <input name=\"salary\"\\n   data-qa=\"salary\"\\n   type=\"number\">\\n  </label>';\nvar button = \"<button>Save to table</button>\";\nform.insertAdjacentHTML(\"afterbegin\", button);\nform.insertAdjacentHTML(\"afterbegin\", formSalary);\nform.insertAdjacentHTML(\"afterbegin\", formAge);\nform.insertAdjacentHTML(\"afterbegin\", formCountry);\nform.insertAdjacentHTML(\"afterbegin\", formPosition);\nform.insertAdjacentHTML(\"afterbegin\", formName);\nfunction createMessage(text, className) {\n    var messageElement = document.createElement(\"div\");\n    messageElement.setAttribute(\"data-qa\", \"notification\");\n    messageElement.classList.add(\"notification\", className);\n    messageElement.innerText = text;\n    return messageElement;\n}\nform.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n    var data = new FormData(form);\n    var namePerson = data.get(\"name\");\n    var age = data.get(\"age\");\n    var position = data.get(\"position\");\n    var salary = data.get(\"salary\");\n    if (namePerson.trim().length < 4) document.body.append(createMessage(\"Name value has less than 4 letters\", \"error\"));\n    else if (position.trim().length === 0) document.body.append(createMessage(\"Position field cannot be empty\", \"error\"));\n    else if (+age < 18 || +age >= 90 || isNaN(age)) document.body.append(createMessage(\"Age value is less than 18 or more than 90\", \"error\"));\n    else if (+salary <= 0) document.body.append(createMessage(\"Add salary\", \"error\"));\n    else {\n        document.body.append(createMessage(\"Employee successfully added\", \"success\"));\n        var newPerson = [\n            namePerson,\n            position,\n            data.get(\"office\"),\n            age,\n            \"$\".concat((+(salary / 1000)).toFixed(3).replace(\".\", \",\"))\n        ];\n        var newRow = tableBody.insertRow(-1);\n        newPerson.forEach(function(item, index) {\n            var cell = newRow.insertCell(index);\n            cell.innerText = item;\n        });\n        form.reset();\n    }\n    setTimeout(function() {\n        var notifications = document.querySelectorAll(\".notification\");\n        notifications.forEach(function(notification) {\n            notification.parentNode.removeChild(notification);\n        });\n    }, 3000);\n});\nvar editedCell = null;\ntable.addEventListener(\"dblclick\", function(e) {\n    editedCell = e.target.textContent;\n    e.target.innerHTML = '<input class=\"cell-input\" value=\"'.concat(editedCell, '\">');\n    e.target.querySelector(\".cell-input\").focus();\n});\ntable.addEventListener(\"blur\", function(e) {\n    var input = e.target;\n    if (input.classList.contains(\"cell-input\")) {\n        var newText = input.value.trim() || editedCell;\n        var cell = input.closest(\"td\");\n        cell.innerText = newText;\n        editedCell = null;\n    }\n});\ntable.addEventListener(\"keypress\", function(e) {\n    var input = e.target;\n    if (e.key === \"Enter\" && input.classList.contains(\"cell-input\")) {\n        var newText = input.value.trim() || editedCell;\n        var cell = input.closest(\"td\");\n        cell.innerText = newText;\n        editedCell = null;\n    }\n});\n\n//# sourceMappingURL=index.5ecf05ea.js.map\n","'use strict';\n\nconst form = document.createElement('form');\nconst table = document.querySelector('table');\nconst tableHead = table.querySelector('thead');\nconst tableBody = table.querySelector('tbody');\nconst rows = Array.from(tableBody.querySelectorAll('tr'));\n\nlet sortedColumn = null;\nlet sortOrder = 'asc';\n\nconst countries = [\n  'Tokyo',\n  'Singapore',\n  'London',\n  'New York',\n  'Edinburgh',\n  'San Francisco',\n];\n\nfunction selectRow(row) {\n  rows.forEach((item) => {\n    item.classList.remove('active');\n  });\n\n  row.classList.add('active');\n}\n\nrows.forEach((row) => {\n  row.addEventListener('click', () => {\n    selectRow(row);\n  });\n});\n\ntableHead.addEventListener('click', (e) => {\n  const index = e.target.cellIndex;\n  const rowsTable = Array.from(tableBody.querySelectorAll('tr'));\n\n  if (index === sortedColumn) {\n    sortOrder = sortOrder === 'asc' ? 'desc' : 'asc';\n  } else {\n    sortedColumn = index;\n    sortOrder = 'asc';\n  }\n\n  const sortedRows = rowsTable.sort((rowA, rowB) => {\n    switch (index) {\n      case 0:\n      case 1:\n      case 2:\n        return rowA.cells[index].innerText.localeCompare(\n          rowB.cells[index].innerText,\n        );\n\n      case 3:\n        return +rowA.cells[index].innerText - +rowB.cells[index].innerText;\n\n      case 4:\n        return (\n          parseFloat(rowA.cells[index].innerText.slice(1)) -\n          parseFloat(rowB.cells[index].innerText.slice(1))\n        );\n\n      default:\n        return 0;\n    }\n  });\n\n  if (sortOrder === 'desc') {\n    sortedRows.reverse();\n  }\n\n  tableBody.append(...sortedRows);\n});\n\nform.classList.add('new-employee-form');\ndocument.body.append(form);\n\nconst formName =\n  '<label>Name: <input name=\"name\" data-qa=\"name\" type=\"text\"></label>';\nconst formPosition = `<label>Position:\n    <input name=\"position\" data-qa=\"position\" type=\"text\"></label>`;\nconst formCountry = `\n  <label> Country:\n  <select name=\"office\" data-qa=\"office\">\n    ${countries.map((country) => `<option value=\"${country}\">${country}</option>`).join('')}\n  </select>\n  </label>`;\nconst formAge = `<label>Age:\n    <input name=\"age\" data-qa=\"age\" type=\"number\">\n  </label>`;\nconst formSalary = `<label>Salary: <input name=\"salary\"\n   data-qa=\"salary\"\n   type=\"number\">\n  </label>`;\nconst button = `<button>Save to table</button>`;\n\nform.insertAdjacentHTML('afterbegin', button);\nform.insertAdjacentHTML('afterbegin', formSalary);\nform.insertAdjacentHTML('afterbegin', formAge);\nform.insertAdjacentHTML('afterbegin', formCountry);\nform.insertAdjacentHTML('afterbegin', formPosition);\nform.insertAdjacentHTML('afterbegin', formName);\n\nfunction createMessage(text, className) {\n  const messageElement = document.createElement('div');\n\n  messageElement.setAttribute('data-qa', 'notification');\n  messageElement.classList.add('notification', className);\n  messageElement.innerText = text;\n\n  return messageElement;\n}\n\nform.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const data = new FormData(form);\n  const namePerson = data.get('name');\n  const age = data.get('age');\n  const position = data.get('position');\n  const salary = data.get('salary');\n\n  if (namePerson.trim().length < 4) {\n    document.body.append(\n      createMessage('Name value has less than 4 letters', 'error'),\n    );\n  } else if (position.trim().length === 0) {\n    document.body.append(\n      createMessage('Position field cannot be empty', 'error'),\n    );\n  } else if (+age < 18 || +age >= 90 || isNaN(age)) {\n    document.body.append(\n      createMessage('Age value is less than 18 or more than 90', 'error'),\n    );\n  } else if (+salary <= 0) {\n    document.body.append(createMessage('Add salary', 'error'));\n  } else {\n    document.body.append(\n      createMessage('Employee successfully added', 'success'),\n    );\n\n    const newPerson = [\n      namePerson,\n      position,\n      data.get('office'),\n      age,\n      `$${(+(salary / 1000)).toFixed(3).replace('.', ',')}`,\n    ];\n\n    const newRow = tableBody.insertRow(-1);\n\n    newPerson.forEach((item, index) => {\n      const cell = newRow.insertCell(index);\n\n      cell.innerText = item;\n    });\n\n    form.reset();\n  }\n\n  setTimeout(() => {\n    const notifications = document.querySelectorAll('.notification');\n\n    notifications.forEach((notification) => {\n      notification.parentNode.removeChild(notification);\n    });\n  }, 3000);\n});\n\nlet editedCell = null;\n\ntable.addEventListener('dblclick', (e) => {\n  editedCell = e.target.textContent;\n\n  e.target.innerHTML = `<input class=\"cell-input\" value=\"${editedCell}\">`;\n  e.target.querySelector('.cell-input').focus();\n});\n\ntable.addEventListener('blur', (e) => {\n  const input = e.target;\n\n  if (input.classList.contains('cell-input')) {\n    const newText = input.value.trim() || editedCell;\n    const cell = input.closest('td');\n\n    cell.innerText = newText;\n    editedCell = null;\n  }\n});\n\ntable.addEventListener('keypress', (e) => {\n  const input = e.target;\n\n  if (e.key === 'Enter' && input.classList.contains('cell-input')) {\n    const newText = input.value.trim() || editedCell;\n    const cell = input.closest('td');\n\n    cell.innerText = newText;\n    editedCell = null;\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","form","document","createElement","table","querySelector","tableHead","tableBody","rows","from","querySelectorAll","sortedColumn","sortOrder","forEach","row","addEventListener","item","classList","remove","add","e","index","target","cellIndex","rowsTable","sortedRows","sort","rowA","rowB","cells","innerText","localeCompare","parseFloat","slice","reverse","append","apply","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","constructor","name","test","_non_iterable_spread","TypeError","body","formCountry","concat","countries","map","country","join","createMessage","text","className","messageElement","setAttribute","insertAdjacentHTML","preventDefault","data","FormData","namePerson","get","age","position","salary","trim","isNaN","newPerson","toFixed","replace","newRow","insertRow","cell","insertCell","reset","setTimeout","notifications","notification","parentNode","removeChild","editedCell","textContent","innerHTML","focus","input","contains","newText","value","closest","key"],"version":3,"file":"index.5ecf05ea.js.map"}